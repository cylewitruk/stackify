# ------------------------------------------------------------------------------
# Build stage for Stacks Core dependencies and build environment
# ------------------------------------------------------------------------------
FROM rust:1.76-slim-bookworm as build-base
ARG USER_ID
ARG GROUP_ID
ARG BITCOIN_VERSION
ARG PRE_COMPILE="false"

ENV PRE_COMPILE=${PRE_COMPILE}

# Update and install packages
RUN apt update \
#    && apt upgrade -y \
    && apt install -y build-essential libclang-dev git wget tree \
        clang mold

RUN rustup component add rustfmt

# Create our non-root user & group ('stacks')
RUN groupadd -r -g ${GROUP_ID} stacks \
    && useradd -r -m --uid ${GROUP_ID} -g ${GROUP_ID} stacks \
    && install -d -m 0755 -o stacks -g stacks \
        /src \
        /target \
        /out

USER stacks
COPY --chown=stacks:stacks ./cargo-config.toml /home/stacks/.cargo/config.toml

RUN mkdir ~/repos

# Clone 'stacks-core'
RUN cd ~/repos \
    && git clone https://github.com/stacks-network/stacks-core.git
# Build 'stacks-node' from 'stacks-core' to cache dependencies.
RUN cd ~/repos/stacks-core \
    && if [ "$PRE_COMPILE" = "true" ]; then cargo build --profile docker --package stacks-node --bin stacks-node; fi \
    && cd ..
# Clone 'sbtc'.
RUN cd ~/repos \
    git clone https://github.com/stacks-network/sbtc.git
# Clone 'clarinet'.
RUN cd ~/repos \
    && git clone https://github.com/hirosystems/clarinet.git --recursive 
# Build the 'clarinet' binary to cache dependencies.
RUN cd ~/repos/clarinet \
    && git submodule update --recursive --init \
    && if [ "$PRE_COMPILE" = "true" ]; then cargo build --profile docker && cd ..; fi

ENV CARGO_INCREMENTAL 1
ENV CARGO_TARGET_DIR /target

WORKDIR /home/stacks