# ------------------------------------------------------------------------------
# Build stage for Stacks Core dependencies and build environment
# ------------------------------------------------------------------------------
FROM rust:1.80-slim-bookworm as build-base
ARG USER_ID
ARG GROUP_ID
ARG PRE_COMPILE=false

ENV PRE_COMPILE=${PRE_COMPILE}

# Update and install packages
RUN apt update \
    && apt install -y build-essential libclang-dev git wget tree clang mold

RUN rustup component add rustfmt
RUN rustup update

# Create our non-root user & group ('stacks')
RUN groupadd -r -g ${GROUP_ID} stackify \
    && useradd -r -m --uid ${GROUP_ID} -g ${GROUP_ID} stackify \
    && install -d -m 0777 -o stackify -g stackify \
        /src \
        /target \
        /out \
        /repos

USER stackify
COPY --chown=stackify:stackify ./build-setup.sh /build-setup.sh
RUN /build-setup.sh

# USER stackify

# # Clone 'stacks-core'
# RUN cd /repos \
#     && git clone https://github.com/stacks-network/stacks-core.git
# # Build 'stacks-node' from 'stacks-core' to cache dependencies.
# RUN cd /repos/stacks-core \
#     && if [ "$PRE_COMPILE" = "true" ]; then cargo build --config /cargo-config.toml --profile docker --package stacks-node --bin stacks-node; fi
# # Clone 'sbtc'.
# RUN cd /repos \
#     git clone https://github.com/stacks-network/sbtc.git
# # Clone 'clarinet'.
# RUN cd /repos \
#     && git clone https://github.com/hirosystems/clarinet.git --recursive 
# # Build the 'clarinet' binary to cache dependencies.
# RUN cd /repos/clarinet \
#     && git submodule update --recursive --init \
#     && if [ "$PRE_COMPILE" = "true" ]; then cargo build --config /cargo-config.toml --profile docker; fi

ENV CARGO_INCREMENTAL 1
ENV CARGO_TARGET_DIR /target

WORKDIR /